- hosts: localhost
  name:  DeployUbuntu.yml
  gather_facts: false
  vars:
    TempDir:                   /tmp                                 # Temp directory on the local machine
    WorkingDir:                /tmp/ubuntu20                        # Working directory on the local machine
    UbuntuISO:                 ubuntu-20.04.1-live-server-amd64.iso # Ubuntu ISO filename
    UbuntuISO_URL:             https://releases.ubuntu.com/20.04/   # Ubuntu ISO URL
    UbuntuNewISO:              ubuntu2004.iso                       # Ubuntu custom ISO name
    vCenterServer:             vcenter01.example.com                # vCenter FQDN
    vCenterUser:               Administrator@vsphere.local          # vCenter username
    vCenterPassword:           Passw@rd                             # vCenter password
    DataCenter:                YourDatacenter                       # vCenter datacenter
    vSphereCluster:            YourCluster                          # vCenter cluster
    VMFolder:                  /some/folder                         # vCenter VM folder
    Datastore:                 VM_Datastore                         # vSphere datastore for vm deployment
    IsoDatastore:              ISO_datastore                        # vSphere ISO Datastore
    UbuntuVMName:              NewVM                                # Ubuntu VM name of the virtual machine
    UbuntuVMDiskSize:          50                                   # Ubuntu VM disksize in gigabytes
    UbuntuVMMemorySize:        4096                                 # Ubuntu VM memory size in megabytes
    UbuntuVMCPUs:              2                                    # Ubuntu VM number of CPUs
    UbuntuVMCPUCores:          1                                    # Ubuntu VM number of cores
    UbuntuVMPortGroup:         "VM Network"                         # Ubuntu VM vSphere portgroup
    UbuntuOSLocale:            en_US                                # Ubuntu OS locale
    UbuntuOSKeyboardLayout:    en                                   # Ubuntu OS keyboard layout
    UbuntuOSKeyboardVariant:   us                                   # Ubuntu OS keyboard variant
    UbuntuOSIPv4Address:       10.0.0.53/24                         # Ubuntu OS IPv4 address
    UbuntuOSIPv4Gateway:       10.0.0.1                             # Ubuntu OS IPv4 gateway
    UbuntuOSIPv4DNS:           8.8.8.8                              # Ubuntu OS DNS server
    UbuntuOSSearchDomain:      example.com                          # Ubuntu OS DNS search domain
    UbuntuOSHostname:          NewVM                                # Ubuntu OS hostname
    UbuntuOSUser:              ubuntu                               # Ubuntu OS username
    UbuntuOSPassword:          Passw@rd                             # Ubuntu OS password

  tasks:
    - name: Create working directory on Ansible Controller
      file:
        path: "{{ WorkingDir }}"
        state: directory

    - name: Check if Ubuntu ISO exists in VMware Datastore
      community.vmware.vsphere_file:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        datacenter: "{{ DataCenter }}"
        validate_certs: no
        datastore: "{{ IsoDatastore }}"
        path: "{{ IsoDatastore }}/{{ UbuntuISO }}"
        state: file
      register: IsoImageFacts

    - name: Check if Ubuntu ISO exists locally on Ansible Controller
      stat:
        path: "{{ TempDir }}/{{ UbuntuISO }}"
      register: InstallerFileCheck
      when:
        - IsoImageFacts.stat.exists != true

    - name: Download Ubuntu ISO (if ISO file doesn't exist locally)
      get_url:
        url:  "{{ UbuntuISO_URL }}{{ UbuntuISO }}"
        dest: "{{ TempDir }}/{{ UbuntuISO }}"
      when:
        - InstallerFileCheck.stat.exists != true
        - IsoImageFacts.stat.exists != true

    - name: Mount Ubuntu ISO
      action: mount name="{{ WorkingDir }}/iso" src="{{ TempDir }}/{{ UbuntuISO }}" opts=loop fstype=iso9660 state=mounted
      when:
        - IsoImageFacts.stat.exists != true

    - name: Copy txt.cfg from Ubuntu ISO
      copy:
        src: "{{ WorkingDir }}/iso/isolinux/txt.cfg"
        dest: "{{ WorkingDir }}/isocopy/isolinux/"
        mode: "666"
      when:
        - IsoImageFacts.stat.exists != true

    - name: Edit txt.cfg to modify append line
      replace:
        dest: "{{ WorkingDir }}/isocopy/isolinux/txt.cfg"
        regexp: 'append   initrd=/casper/initrd quiet  ---'
        replace: 'append   initrd=/casper/initrd quiet --- autoinstall ds=nocloud;s=/cdrom/autoinstall/'
      when:
        - IsoImageFacts.stat.exists != true

    - name: Create directory to store user-data and meta-data
      file:
        path: "{{ WorkingDir }}/isocopy/autoinstall"
        state: directory
      when:
        - IsoImageFacts.stat.exists != true

    - name: Copy user-data file to directory
      template:
        src: ./VM_Config/Ubuntu_user-data.j2
        dest: "{{ WorkingDir }}/isocopy/autoinstall/user-data"
        mode: "666"
      when:
        - IsoImageFacts.stat.exists != true

    - name: Create empty meta-data file in directory
      file:
        path: "{{ WorkingDir }}/isocopy/autoinstall/meta-data"
        state: touch
        mode: "666"
      when:
        - IsoImageFacts.stat.exists != true

    - name: Create custom Ubuntu ISO
      command: "xorrisofs -relaxed-filenames -J -R -o {{ TempDir }}/{{ UbuntuNewISO }} -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ WorkingDir }}/isocopy/"
      args:
        chdir: "{{ WorkingDir }}/isocopy/"
      when:
        - IsoImageFacts.stat.exists != true

    - name: Unmount Ubuntu ISO
       action: mount name="{{ WorkingDir }}/iso" src="{{ TempDir }}/{{ UbuntuISO }}" fstype=iso9660 state=absent
      when:
        - IsoImageFacts.stat.exists != true

    - name: Upload the custom Ubuntu ISO to the vSphere datastore
      vsphere_copy:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        datacenter: "{{ DataCenter }}"
        src: "{{ TempDir }}/{{ UbuntuNewISO }}"
        datastore: "{{ IsoDatastore }}"
        path: "/{{ UbuntuNewISO }}"
      when:
        - IsoImageFacts.stat.exists != true

    - name: Deploy Ubuntu VM
      vmware_guest:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        name: "{{ UbuntuVMName }}"
        state: poweredon
        guest_id: ubuntu64Guest
        cluster: "{{ vSphereCluster }}"
        datacenter: "{{ DataCenter }}"
        folder: "{{ VMFolder }}"
        disk:
        - size_gb: "{{ UbuntuVMDiskSize }}"
          type: thin
          datastore: "{{ Datastore }}"
        hardware:
          memory_mb: "{{ UbuntuVMMemorySize }}"
          num_cpus: "{{ UbuntuVMCPUs }}"
          num_cpu_cores_per_socket: "{{ UbuntuVMCPUCores }}"
          scsi: paravirtual
        networks:
          - name: "{{ UbuntuVMPortGroup }}"
            device_type: vmxnet3
        cdrom:
          type: iso
          iso_path: "[{{ IsoDatastore }}]/{{ UbuntuNewISO }}"
        annotation: |
                    *** Auto-Deployed by Ansible ***
                    Username: {{ UbuntuOSUser }}
                    Password: {{ UbuntuOSPassword }}


    - name: Start checking if the Ubuntu VM is ready
      vmware_guest_info:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        datacenter: "{{ DataCenter }}"
        validate_certs: no
        name: "{{ UbuntuVMName }}"
        schema: vsphere
      register: vm_facts
      until: vm_facts.instance.guest.hostName is search(UbuntuOSHostname)
      retries: 30
      delay: 60


    - name: Set password for the Ubuntu user
      vmware_vm_shell:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/echo
        vm_shell_args: "'{{ UbuntuOSUser }}:{{ UbuntuOSPassword }}' | sudo chpasswd"

    - name: Copy network configuration file to working directory
      template:
        src: ./VM_Config/Ubuntu_Netplan.j2
        dest: "{{ WorkingDir }}/00-installer-config.yaml"
        mode: "666"


    - name: Copy network configuration file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: "{{ UbuntuOSPassword }}"
        copy:
            src: "{{ WorkingDir }}/00-installer-config.yaml"
            dest: "/home/{{ UbuntuOSUser }}/00-installer-config.yaml"


    - name: Move network configuration file to right location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: "{{ UbuntuOSPassword }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ UbuntuOSUser }}/00-installer-config.yaml /etc/netplan/00-installer-config.yaml"

    - name: Appply the network configuration on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ vCenterServer }}"
        username: "{{ vCenterUser }}"
        password: "{{ vCenterPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: "{{ UbuntuOSPassword }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: netplan apply

    - name: Delete working directory on Ansible controller
      file:
        path: "{{ WorkingDir }}"
        state: absent